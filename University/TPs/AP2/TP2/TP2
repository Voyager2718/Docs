from turtle import *

def is_palindromic(str, depth = 0):
    dots = "..." * depth
    print("{:s}->is_palindromic(\"{:s}\")".format(dots,str))
    if(str == ""):
        print("{:s}->is_palindromic(\"{:s}\")".format(dots,str))
        return True
    if(str[0]!=str[len(str)-1]):
        print("{:s}->is_palindromic(\"{:s}\")".format(dots,str))
        return False
    else:
        res = is_palindromic(str[1:-1],depth+1)
        if(res == 0):
            b = "False"
        else:
            b = "True"
        print("{:s}<-{:s}".format(dots,b))
    return res

def somme(a,b, depth = 0):
    dots = "..." * depth
    print("{:s}->somme({:d},{:d})".format(dots,a,b))
    if(b == 0):
        print("{:s}<-{:d}".format(dots,a))
        return a
    if(b>=1):
        res = somme(a+1,b-1,depth+1)
        print("{:s}<-{:d}".format(dots,res))
        return res
    else:
        res = somme(a-1,b+1,depth+1)
        print("{:s}<-{:d}".format(dots,res))
        return res

def binomial(a,b, depth = 0):
    assert(a>=b)
    dots = "..." * depth
    print("{:s}->binomial({:d},{:d})".format(dots,a,b))
    if(b == 0):
        print("{:s}<-1".format(dots))
        return 1
    if(b == a):
        print("{:s}<-1".format(dots))
        return 1
    else:
        res = binomial(a-1,b-1,depth+1)+binomial(a-1,b,depth+1)
        print("{:s}<-{:d}".format(dots,res))
    return res

def fibo(n,depth=0):
    dots = "..."*depth
    print("{:s}->fibo({:d})".format(dots,n))
    if(n==1):
        print("{:s}<-{:d}".format(dots,1))
        return 1
    if(n==0):
        print("{:s}<-{:d}".format(dots,0))
        return 0
    res = fibo(n-1,depth+1)+fibo(n-2,depth+1)
    print("{:s}<-{:d}".format(dots,res))
    return res

def movePen(x,y):
    penup()
    goto(x,y)
    pendown()


def draw0(t,fromX=-300):
    assert(isinstance(t,int))
    assert(isinstance(fromX,int))
    if(t == 0):
        return
    penup()
    goto(fromX,0)
    pendown()
    fromX += 50
    goto(fromX,50)
    fromX += 50
    goto(fromX,0)
    draw0(t-1,fromX)

def draw1(n,l):
    if(n ==0):
        forward(l)
    else:
        for angle in (60,-120,60,0):
            draw1(n-1,l/3)
            left(angle)

def c(n,l,f,s=0):
    clearscreen()
    speed(s)
    f(n,l)

def draw2(n,l,t=3):
    if(t == 0):
        return
    right(120)
    draw1(n,l)
    draw2(n,l,t-1)

def draw3(n, l):
    if(n == 0):
        forward(l)
    else:
        for angle in [85, -170, 85, 0]:
            draw3(n-1, 0.3804*l)
            left(angle)

def draw4(n,l,t=4):
    if(t==0):
            return
    draw3(n,l)
    left(90)
    draw4(n,l,t-1)

def draw5(n,l):
    if n==0:
        for i in range(0,3):
            forward(l)
            left(120)
    else:
        draw5(n-1,l/2)
        forward(l/2)
        draw5(n-1,l/2)
        back(l/2)
        left(60)
        forward(l/2)
        right(60)
        draw5(n-1,l/2)
        left(60)
        back(l/2)
        right(60)